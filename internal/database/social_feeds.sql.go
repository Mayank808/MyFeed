// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: social_feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSocialFeed = `-- name: CreateSocialFeed :one
INSERT INTO social_feeds (id, name, url, user_id, created_at, updated_at) 
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, url, user_id, created_at, updated_at
`

type CreateSocialFeedParams struct {
	ID        uuid.UUID
	Name      string
	Url       string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateSocialFeed(ctx context.Context, arg CreateSocialFeedParams) (SocialFeed, error) {
	row := q.db.QueryRowContext(ctx, createSocialFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i SocialFeed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllSocialFeed = `-- name: GetAllSocialFeed :many
SELECT id, name, url, user_id, created_at, updated_at FROM social_feeds
`

func (q *Queries) GetAllSocialFeed(ctx context.Context) ([]SocialFeed, error) {
	rows, err := q.db.QueryContext(ctx, getAllSocialFeed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SocialFeed
	for rows.Next() {
		var i SocialFeed
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
